#+LaTeX_CLASS_OPTIONS: [a4paper,12pt]
#+TITLE: Class diagrams
#+LATEX_HEADER: \setlength{\textheight}{24cm}
#+LATEX_HEADER: \setlength{\textwidth}{16cm}
#+LATEX_HEADER: \setlength{\evensidemargin}{-0cm}
#+LATEX_HEADER: \setlength{\oddsidemargin}{-0cm}
#+LATEX_HEADER: \setlength{\topmargin}{0cm}
#+LATEX_HEADER: \renewcommand{\baselinestretch}{1.1}%1.1


* OOMMF Classes


Inheritance structure taken from http://math.nist.gov/oommf/doc/userguide12a6/userguide/Standard_Oxs_Ext_Child_Clas.html#BA, with additional reading of source code in ~oommf/app/oxs/base~ and ~oommf/app/oxs/ext~

** Atlasses

#+CAPTION: OOMMF Atlas classes
#+NAME: fig:example
#+ATTR_LATEX: :width 1\textwidth
file:atlas.eps

*** COMMENT Source

#+begin_src plantuml :file atlas.eps :exports none
!include plantuml.h
left to right direction

abstract class Oxs_Atlas {
}


class Oxs_BoxAtlas {
  An axes parallel rectangular parallelepiped,
containing a single region that is coterminous
with the atlas itself.

' See http://math.nist.gov/oommf/doc/userguide12a6/userguide/Standard_Oxs_Ext_Child_Clas.html#BA
}


class Oxs_ImageAtlas {
  This class is designed to allow an image file
  to be used to define regions in  terms of
  colors in the image.

 'It is intended for use in conjunction with the Oxs_AtlasScalarField and Oxs_AtlasVectorField classes in circumstances where a small number of distinct species (materials) are being modeled. This provides a generalization of the mask file functionality of the 2D solver (Sec. 17.1.3).

 'For situations requiring continuous variation in material parameters, the script field classes should be used in conjunction with the ReadFile MIF extension command. See the ColorField sample proc in the ReadFile documentation for an example of this technique.
}

class Oxs_MultiAtlas {
  This atlas is built up as an ordered list of other atlases.

}

class Oxs_ScriptAtlas {
  An atlas where the regions are defined via a Tcl script.
}

class Oxs_EllipsoidAtlas  {
  Defines an ellipsoidal region with axes parallel to the
  coordinate axes.
}

Oxs_Atlas <|-- Oxs_ImageAtlas
Oxs_Atlas <|-- Oxs_MultiAtlas
Oxs_Atlas <|-- Oxs_ScriptAtlas
Oxs_Atlas <|-- Oxs_EllipsoidAtlas
Oxs_Atlas <|-- Oxs_BoxAtlas
Oxs_Ext <|-- Oxs_Atlas


#+end_src

#+RESULTS:
[[file:atlas.eps]]

\clearfloat




** Meshes

#+CAPTION: Mesh classes
#+NAME: fig:example
#+ATTR_LATEX: :width 1\textwidth
file:example.eps

*** COMMENT Source

#+begin_src plantuml :file example.eps :exports none
!include plantuml.h

abstract class AbstractClass {
OMFField
TemplateMethod()
{abstract} PrimitiveOp1()
{abstract} PrimitiveOp2()
}
note right: . . .\nPrimitiveOp1()\nPrimitiveOp2()\n. . .

class ConcreteClass {
PrimitiveOperation1()
PrimitiveOperation2()
}

class ConcreteClass2 {
PrimitiveOperation1()
PrimitiveOperation2()
}

AbstractClass <|-- ConcreteClass
AbstractClass <|-- ConcreteClass2

#+end_src

#+RESULTS:
[[file:example.eps]]



** Example class

#+CAPTION[Example UML]: This is an example UML class diagram
#+NAME: fig:example
#+ATTR_LATEX: :width 1\textwidth
file:example.eps

*** COMMENT Source

#+begin_src plantuml :file example.eps :exports none
!include plantuml.h

abstract class AbstractClass {
OMFField
TemplateMethod()
{abstract} PrimitiveOp1()
{abstract} PrimitiveOp2()
}
note right: . . .\nPrimitiveOp1()\nPrimitiveOp2()\n. . .

class ConcreteClass {
PrimitiveOperation1()
PrimitiveOperation2()
}

class ConcreteClass2 {
PrimitiveOperation1()
PrimitiveOperation2()
}

AbstractClass <|-- ConcreteClass
AbstractClass <|-- ConcreteClass2

#+end_src

#+RESULTS:
[[file:example.eps]]



* Setting up your system to compile this file

** Mini tutorial generating UML diagrams

- Install 'plantuml' on your system
  - ~brew install plantuml~ on OS X
- Tell Emacs where to find the plantuml jar file (in ~.emacs):
  #+BEGIN_SRC elisp :results output :exports both
  (setq org-plantuml-jar-path~
      (expand-file-name "/usr/local/Cellar/plantuml/8031/plantuml.8031.jar"))
  #+END_SRC

- Tell Emacs to parse plantuml code (also python, sh, dot in this example):

  #+BEGIN_SRC elisp :results output :exports both
   ;; enable python for in-buffer evaluation
   (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (python . t)
      (sh . t)
      (plantuml . t)
      (dot . t)
      ))

   ;; all plantuml and dot code to execute without confirmation
   (defun my-org-confirm-babel-evaluate (lang body)
   (not (or (string= lang "plantuml") (string= lang "dot"))))
   (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
  #+END_SRC

- To re-execute the plantuml code, use ~C-c C-c~ when the cursor is in that block.

- Let's add ~*.eps~ files to the repository, so that we only need tis setup for creating new class diagrams.

** To compile the pdf from this file (watch how the screen changes):
 ~C-c C-e l p~
